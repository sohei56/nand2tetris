// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl
/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */
CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    Mux16(a=a, b=b, sel=sel[0], out=muxab);
    Mux16(a=c, b=d, sel=sel[0], out=muxcd);
    Mux16(a=muxab, b=muxcd, sel=sel[1], out=out);
}

/**
 * CHIP Mux4Way16 {
 *     IN a[16], b[16], c[16], d[16], sel[2];
 *     OUT out[16];
 * 
 *     PARTS:
 *     Mux(a=a[0], b=b[0], sel=sel[0], out=muxab0);
 *     Mux(a=c[0], b=d[0], sel=sel[0], out=muxcd0);
 *     Mux(a=muxab0, b=muxcd0, sel=sel[1], out=out[0]);
 * 
 *     Mux(a=a[1], b=b[1], sel=sel[0], out=muxab1);
 *     Mux(a=c[1], b=d[1], sel=sel[0], out=muxcd1);
 *     Mux(a=muxab1, b=muxcd1, sel=sel[1], out=out[1]);
 * 
 *     Mux(a=a[2], b=b[2], sel=sel[0], out=muxab2);
 *     Mux(a=c[2], b=d[2], sel=sel[0], out=muxcd2);
 *     Mux(a=muxab2, b=muxcd2, sel=sel[1], out=out[2]);
 * 
 *     Mux(a=a[3], b=b[3], sel=sel[0], out=muxab3);
 *     Mux(a=c[3], b=d[3], sel=sel[0], out=muxcd3);
 *     Mux(a=muxab3, b=muxcd3, sel=sel[1], out=out[3]);
 * 
 *     Mux(a=a[4], b=b[4], sel=sel[0], out=muxab4);
 *     Mux(a=c[4], b=d[4], sel=sel[0], out=muxcd4);
 *     Mux(a=muxab4, b=muxcd4, sel=sel[1], out=out[4]);
 * 
 *     Mux(a=a[5], b=b[5], sel=sel[0], out=muxab5);
 *     Mux(a=c[5], b=d[5], sel=sel[0], out=muxcd5);
 *     Mux(a=muxab5, b=muxcd5, sel=sel[1], out=out[5]);
 * 
 *     Mux(a=a[6], b=b[6], sel=sel[0], out=muxab6);
 *     Mux(a=c[6], b=d[6], sel=sel[0], out=muxcd6);
 *     Mux(a=muxab6, b=muxcd6, sel=sel[1], out=out[6]);
 * 
 *     Mux(a=a[7], b=b[7], sel=sel[0], out=muxab7);
 *     Mux(a=c[7], b=d[7], sel=sel[0], out=muxcd7);
 *     Mux(a=muxab7, b=muxcd7, sel=sel[1], out=out[7]);
 * 
 *     Mux(a=a[8], b=b[8], sel=sel[0], out=muxab8);
 *     Mux(a=c[8], b=d[8], sel=sel[0], out=muxcd8);
 *     Mux(a=muxab8, b=muxcd8, sel=sel[1], out=out[8]);
 * 
 *     Mux(a=a[9], b=b[9], sel=sel[0], out=muxab9);
 *     Mux(a=c[9], b=d[9], sel=sel[0], out=muxcd9);
 *     Mux(a=muxab9, b=muxcd9, sel=sel[1], out=out[9]);
 * 
 *     Mux(a=a[10], b=b[10], sel=sel[0], out=muxab10);
 *     Mux(a=c[10], b=d[10], sel=sel[0], out=muxcd10);
 *     Mux(a=muxab10, b=muxcd10, sel=sel[1], out=out[10]);
 * 
 *     Mux(a=a[11], b=b[11], sel=sel[0], out=muxab11);
 *     Mux(a=c[11], b=d[11], sel=sel[0], out=muxcd11);
 *     Mux(a=muxab11, b=muxcd11, sel=sel[1], out=out[11]);
 * 
 *     Mux(a=a[12], b=b[12], sel=sel[0], out=muxab12);
 *     Mux(a=c[12], b=d[12], sel=sel[0], out=muxcd12);
 *     Mux(a=muxab12, b=muxcd12, sel=sel[1], out=out[12]);
 * 
 *     Mux(a=a[13], b=b[13], sel=sel[0], out=muxab13);
 *     Mux(a=c[13], b=d[13], sel=sel[0], out=muxcd13);
 *     Mux(a=muxab13, b=muxcd13, sel=sel[1], out=out[13]);
 * 
 *     Mux(a=a[14], b=b[14], sel=sel[0], out=muxab14);
 *     Mux(a=c[14], b=d[14], sel=sel[0], out=muxcd14);
 *     Mux(a=muxab14, b=muxcd14, sel=sel[1], out=out[14]);
 * 
 *     Mux(a=a[15], b=b[15], sel=sel[0], out=muxab15);
 *     Mux(a=c[15], b=d[15], sel=sel[0], out=muxcd15);
 *     Mux(a=muxab15, b=muxcd15, sel=sel[1], out=out[15]);
 * }
 */
